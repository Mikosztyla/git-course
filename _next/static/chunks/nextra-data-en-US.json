{"/":{"title":"Index","data":{"tematy#Tematy":"Co to jest ten cały \"Git\"?\nPiersze kroki\nCo to jest Gitignore","użyteczne-pliki#Użyteczne pliki":"Spis najważniejszych komend"}},"/topics/01-introduction/01-history":{"title":"01 History","data":{"trochę-historii#Trochę historii":"Git został stworzony przez Linusa Torvaldsa.\r\nPierwsza wersja Git-a została wydana 7 kwietnia 2005 roku."}},"/commands":{"title":"Commands","data":{"lista-najważniejszych-komend-git-owych#Lista najważniejszych komend Git-owych:":"","git-init#git init":"Tworzy nowe repozytorium Git w bieżącym katalogu.\ngit init","git-clone#git clone":"Kopiuje zdalne repozytorium na lokalny komputer.\ngit clone <URL> [<nazwa_katalogu>]\n--depth <n>: Pobiera tylko ostatnie <n> commitów, co przyspiesza klonowanie (np. przy dużych repozytoriach).\n--branch <branch_name>: Klonuje konkretną gałąź.","git-add#git add":"Dodaje pliki do obszaru staging (do kolejnego commitu).\ngit add <plik>          # Dodaje pojedynczy plik\r\ngit add .               # Dodaje wszystkie zmienione pliki\r\ngit add -A              # Dodaje wszystkie pliki (zależnie od wersji Git może być tożsamy z `git add .`)","git-commit#git commit":"Tworzy nowy commit z plikami dodanymi do staging.\ngit commit -m \"<wiadomość>\"\n-m \"<wiadomość>\": Dodaje wiadomość opisującą commit (krótką i opisową).\n-a: Automatycznie dodaje wszystkie zmienione i śledzone pliki do commitu.\n--amend: Zmienia ostatni commit (używane np. do poprawy wiadomości lub dodania plików).","git-status#git status":"Pokazuje aktualny status repozytorium: zmodyfikowane, usunięte pliki oraz pliki w staging.\ngit status","git-push#git push":"Wysyła lokalne commity do zdalnego repozytorium.\ngit push <zdalne_repo> <gałąź>\n-u <remote> <branch>: Ustawia domyślny zdalny dla gałęzi (pierwsze push wymaga tej flagi, kolejne mogą być git push).\n--force lub -f: Wymusza push (stosowane ostrożnie, ponieważ zmiany w zdalnym repozytorium).\npush --force nadpisze zdalne repozytorium lokalną wersją gałęzi.\nPo wykonaniu dostaniesz pytanie Czy na pewno chcesz to zrobić?, więc tak, dość niebezpieczna operacja.","git-pull#git pull":"Pobiera i łączy zmiany ze zdalnego repozytorium z lokalną gałęzią.\ngit pull <zdalne_repo> <gałąź>\n--rebase: Używa rebase zamiast merge, co pozwala na liniową historię zmian.","git-fetch#git fetch":"Pobiera zmiany ze zdalnego repozytorium, ale ich nie łączy. Przydatne do sprawdzenia, jakie zmiany zaszły w zdalnym repo.\ngit fetch <zdalne_repo>","git-branch#git branch":"Zarządza gałęziami w repozytorium.\ngit branch               # Wyświetla listę lokalnych gałęzi\r\ngit branch <nazwa>       # Tworzy nową gałąź\r\ngit branch -d <nazwa>    # Usuwa gałąź (jeśli jest już zmergowana)\n-D <branch_name>: Wymusza usunięcie gałęzi, nawet jeśli nie została zmergowana.","git-checkout#git checkout":"Przełącza się między gałęziami lub przywraca pliki do określonego stanu.\ngit checkout <gałąź>\r\ngit checkout <plik>      # Przywraca plik do ostatniego commitu\n-b <nowa_gałąź>: Tworzy nową gałąź i od razu się na nią przełącza.","git-merge#git merge":"Łączy zmiany z jednej gałęzi do bieżącej gałęzi.\ngit merge <gałąź>\n--no-ff: Tworzy merge commit nawet w przypadku, gdy możliwe jest szybkie połączenie (fast-forward).\n--abort: Anuluje merge, jeśli wystąpiły konflikty.","git-rebase#git rebase":"Przenosi zmiany na bieżącej gałęzi na szczyt innej gałęzi. Przydatne do tworzenia bardziej liniowej historii.\ngit rebase <gałąź>\n--interactive lub -i: Pozwala na interaktywne przenoszenie commitów (re-ordering, zmiany w historii).\n--continue: Kontynuuje rebase po rozwiązaniu konfliktów.\n--abort: Anuluje rebase i przywraca stan sprzed jego rozpoczęcia.","git-reset#git reset":"Przestawia bieżący HEAD na wybrany commit.\ngit reset <commit>\n--soft: Przenosi HEAD na wybrany commit, ale zostawia zmiany w staging.\n--mixed: Przenosi HEAD na wybrany commit i usuwa zmiany ze staging, ale pozostawia je w katalogu roboczym.\n--hard: Przenosi HEAD na wybrany commit, całkowicie usuwając zmiany ze staging i katalogu roboczego.","git-log#git log":"Wyświetla historię commitów.\ngit log\n--oneline: Wyświetla uproszczoną wersję logu, gdzie każdy commit to jedna linia.\n--graph: Wyświetla historię w formie graficznego drzewa.\n-p: Pokazuje zmiany (diff) dla każdego commitu.\nWciśnij q, żeby przerwać wyświetlanie","git-stash#git stash":"Zapisuje bieżące zmiany w pamięci tymczasowej, umożliwiając tymczasowe przeniesienie się na czystą gałąź.\ngit stash              # Zapisuje bieżące zmiany w stash\r\ngit stash pop          # Przywraca ostatni stash i usuwa go\r\ngit stash list         # Wyświetla listę staszy\nTe polecenia stanowią podstawę codziennej pracy z Git-em. Wszystkie komendy i ich paramentry są raczej ciężkie do zapamiętania, ale na pewno warto wiedzieć, że takie istnieją. Wtedy, będziemy już mogli do Chata-GPT wpisać bardziej konkretne pytanie 😉.Nawet, jeśli przesiądziesz się na jakieś GUI, to i tak warto je znać, bo może się zdażyć, że twój problem jak coś zepsujesz (a zepsujesz, gwarantuje Ci to 😂), 10 razy łatwiej będzie rozwiązać wierszem poleceń."}},"/topics/01-introduction/02-control-version":{"title":"02 Control Version","data":{}},"/topics/02-basics/01-first-repo":{"title":"01 First Repo","data":{"stworzenie-pierwszego-repozytorium#Stworzenie pierwszego repozytorium":"Zacznijmy od podstaw podstaw - sprawdź czy masz Git-a. Otwórz ulubiony wiersz poleceń i wykonaj komendę:\n  git -v\nJeżeli wyświetli się coś innego niż błąd, to lecimy dalej.\nJeżeli nie to pobierz Git-a.","konfiguracja-git-a#Konfiguracja Git-a":"Na początku musisz zdefiniować kim jesteś. Kim jesteś dla Git-a oczywiście.Ustaw swoje imię za pomocą komendy:\n  git config --global user.name \"Twoje imie\"\ni swój e-mail:\n  git config --global user.email \"twoj.mail@example.com\"\nBędą to twoje dane używane do zidentyfikowania autora \"commita\" - co to \"commit\" dowiemy się za chwile.Sprawdź czy wszystko się zgadza:\n  git config user.name\r\n  git config user.email","tworzenie-repozytorium#Tworzenie repozytorium":"Teraz możemy już stworzyć swoje pierwsze repozytorium. Ale co to tak na prawdę jest to repozytorium?\nRepozytorium (w slangu \"repo\") to taki folder plików na sterydach. Również przechowuje on pliki lub podfoldery twoje projektu, ale umożliwia on pracę z Git-em. Rozróżniamy 2 typy:\nlokalne repozytorium (local repository) - jest to stan plików projektu znajdujących się u Ciebie lokalnie na komputerze\nzdalne repozytorium (remote repository) - jest to aktualny stan plików projektu w chmurze\nDość gadania, tworzymy lokalne repo:\n  git init\nTak, to tyle, gratulacje. Pierwsze repo stworzone 😆.Zobacz, że w folderze, gdzie to repo zostało stworzony folder .git. Dzięki temu działa cała magia Git-a, ale nie będziemy tam w środku nic edytować. Zostawiamy go w spokoju."}},"/topics/03-gitignore":{"title":"Gitgnore","data":{}},"/topics/01-introduction":{"title":"Index","data":{"co-to-jest-ten-cały-git#Co to jest ten cały \"Git\"?":"Git – rozproszony system kontroli wersji, który pozwala na niezależne zmiany w jednym kodzie, prowadzone w różnych gałęziach\nTak, takie coś wyskakuje jako pierwsze po wpisaniu definicja git-a do wyszukiwarki Googla. Czy jest to zrozumiałe?\r\nNo może dla osoby, która coś z Git-a już wie, ale czy ktoś kto pierwszy raz usłyszał ten zwrot 2 minuty to ogarnie? - Wątpię.\nJeśli jesteś właśnie tą nową osobą - Nie zniechęcaj się!!!\nGit na początku jest dość ciężki do załapania, ale uwierz mi - WARTO!\nGit to takie narzędzie, które pozwala nam zapisywać różne wersje swojego projektu...\nTak, wiem, brzmi jak zwyłe Ctrl + s, ale uwierz mi, że jest to dużooo lepsze. Dlaczego, między innymi dlatego, że\nmożemy w każdej chwili wrócić do wersji projektu, którą kiedyś zapisaliśmy.\nmożemy równolegle tworzyć kilka wersji tego samego projektu.\nmożemy porównywać zmiany w naszym projekcie w stosunku do poprzednich wersji.\nmożemy pracować nad tym samym projektem nie tylko samemu, ale w dowolną liczbę osób i nie musimy się martwić o nadpisywanie swoich wzajebnych postępów.\nJeśli chcesz już przejść do nauki samego narzędzia, to zapraszam tutaj.\nDalej, w tej cześci, będzie trochę historycznych faktów 😉"}},"/topics/02-basics":{"title":"Index","data":{"podstawy-git-a#Podstawy Git-a":"W tej części wykonamy sobie kilka podstawowych operacji, które będą absolutną podstawą używania Git-a.","plan-działania#Plan działania":"stworzenie pierwszego repo\npierwszy komit\npierwszy pusz\nnowy brancz - nowe nowe przygody\nstajemy się jednością - merdż\nwojna i same konflikty\n\"Rzepka\" Julian Tuwim - pul rzepkę\nSPOJLER\nBędzie fajnie 😎"}}}